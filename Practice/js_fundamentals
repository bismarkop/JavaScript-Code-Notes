// You will create a script that gathers data, processes it, and then outputs a consistent result as described by a specification.


// The provided course information.
const CourseInfo = {
    id: 451,
    name: "Introduction to JavaScript"
};

// The provided assignment group.
const AssignmentGroup = {
    id: 12345,
    name: "Fundamentals of JavaScript",
    course_id: 451,
    group_weight: 25,
    assignments: [
        {
            id: 1,
            name: "Declare a Variable",
            due_at: "2023-01-25",
            points_possible: 50
        },
        {
            id: 2,
            name: "Write a Function",
            due_at: "2023-02-27",
            points_possible: 150
        },
        {
            id: 3,
            name: "Code the World",
            due_at: "3156-11-15",
            points_possible: 500
        }
    ]
};

// The provided learner submission data.
const LearnerSubmissions = [
    {
        learner_id: 125,
        assignment_id: 1,
        submission: {
            submitted_at: "2023-01-25",
            score: 47
        }
    },
    {
        learner_id: 125,
        assignment_id: 2,
        submission: {
            submitted_at: "2023-02-12",
            score: 150
        }
    },
    {
        learner_id: 125,
        assignment_id: 3,
        submission: {
            submitted_at: "2023-01-25",
            score: 400
        }
    },
    {
        learner_id: 132,
        assignment_id: 1,
        submission: {
            submitted_at: "2023-01-24",
            score: 39
        }
    },
    {
        learner_id: 132,
        assignment_id: 2,
        submission: {
            submitted_at: "2023-03-07",
            score: 140
        }
    }
];

function calculateWeightedAverage(assignments, submissions) {
    // Calculate total possible points
    const totalPointsPossible = assignments.reduce((sum, assignment) => sum + assignment.points_possible, 0);

    // Group submissions by learner_id
    const learnerSubmissionsMap = submissions.reduce((acc, submission) => {
        if (!acc[submission.learner_id]) {
            acc[submission.learner_id] = [];
        }
        acc[submission.learner_id].push(submission);
        return acc;
    }, {});

    const results = {};

    // Calculate weighted average for each learner
    for (const learnerId in learnerSubmissionsMap) {
        const learnerSubmissions = learnerSubmissionsMap[learnerId];
        let totalWeightedScore = 0;

        learnerSubmissions.forEach(sub => {
            const assignment = assignments.find(a => a.id === sub.assignment_id);
            if (assignment) {
                totalWeightedScore += sub.submission.score;
            }
        });

        const weightedAverage = (totalWeightedScore / totalPointsPossible) * 100;
        results[learnerId] = weightedAverage;
    }
    
    return results;
}

const weightedAverages = calculateWeightedAverage(AssignmentGroup.assignments, LearnerSubmissions);
console.log(weightedAverages);



// function getLearnerID(submissions, id) {
//     for (let i = 0; i < submissions.length; i++) {
//         if (submissions[i].learner_id === id) {
//             return id
//         }
//     }
// }
// let learnerID = getLearnerID(LearnerSubmissions, 132)

// let learnerScores = function (data, callback) {
//     for (let i = 0; i < data.length; i++) {
//         if (data[i].learner_id === learnerID)
//             if (typeof(callback) === "function"){
//                 callback(data[i])
//             }
//     }
//     console.log(learnerID)
// }

// learnerScores(LearnerSubmissions, function(obj) {
//     let score = 0
//     for (let i = 0; i < obj.length; i++) {
//         score += obj[i].score
//     }
//     console.log(score)
// })
